---
title: "Communicating with Data via R markdown"
subtitle: "Reproducible Reports"
author: "Emi Tanaka"
email: "dr.emi.tanaka@gmail.com"
date: "4th October 2019 | COMBINE | Sydney, Australia"
length: "90 minutes"
pdflink: "link"
titleslide_bgimg: "images/bg1.jpg"
color_theme: "#f9af2b"
output:
  xaringan::moon_reader:
    css: [ninjutsu, "assets/animate.css", "assets/cssgrid.css", "assets/custom.css", "assets/image_modal.css"]
    self_contained: false # if true, fonts will be stored locally
    seal: false # show a title slide with YAML information
    #yolo: false # show Karl randomly
    chakra: 'libs/remark-latest.min.js'
    #beforeInit: "assets/custom.js"
    lib_dir: libs
    includes:
      in_header: "assets/custom.html"
      # before_body: 
      after_body: ["assets/remarkjs_extended.html", "assets/image_modal.js"]
      # includes
    mathjax: "assets/mathjax-local/MathJax.js?config=TeX-AMS-MML_HTMLorMML"
    nature:
      # autoplay: 100 # in milliseconds to play next slide
      # coundown: 100 # to display on each slide (TRUE if autoplay on)
      # titleSlideClass: c("center", "middle", "inverse")
      highlightStyle: dark # [arta, ascetic, dark, default, far, github, googlecode, idea, ir-black, magula, monokai, rainbow, solarized-dark, solarized-light, sunburst, tomorrow, tomorrow-night-blue, tomorrow-night-bright, tomorrow-night, tomorrow-night-eighties, vs, zenburn.]
      highlightLanguage: r # no-highlight to disable
      highlightLines: true
      highlightSpans: false # true: use `backticks` as delimiters.
      countIncrementalSlides: false
      slideNumberFormat: '%current%/%total%'
      navigation:
        scroll: false # disable scrolling to navigate slides
        touch: true
        click: false
      ratio: '16:9' # ['4:3', '13:9']
---

```{r setup, include = FALSE}
library(tidyverse)
```

```{r titleslide, child="titleslide.Rmd"}
```
---



class: question middle 

R Markdown is such an *indispensible tool* for making documents, especially if you have plan to *include statistical output*.


How do you use (or plan to use) <br>R Markdown?

---

class: info

# People that made R Markdown possible

The development of R Markdown is largely thanks to



* Yihui Xie <br>*Software Engineer at RStudio*<br> for `knitr`


* John MacFarlane <br>*Professor of Philosophy at UC Berkeley*<br> for `pandoc`


* and many contributors behind the development of these tools.


---

class: info

# Shortcut for inserting code chunk  

::: grid 

::: item

In  .Rmd press

* Mac: <kbd>⌘</kbd> + <kbd>⌥</kbd> + <kbd>i</kbd> 


* PC: <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>i</kbd> 

to insert a chunk of R code

::: font_large

````markdown
`r ''````{r}

```
````

:::
:::

::: item 

:::

:::

---

# Chunk options: <code>echo</code> & <code>eval</code>

::: grid 
::: item 

````markdown
`r ''````{r, echo = FALSE}
1 + 1
```
````
<center>
<i class="fas fa-arrow-down"></i>
</center>

```{r, echo = FALSE}
1 + 1
```

<p></p>

::: 

::: item 

````markdown
`r ''````{r, eval = FALSE}
1 + 1
```
````

<center>
<i class="fas fa-arrow-down"></i>
</center>

```{r, eval = FALSE}
1 + 1
```

<p></p>

:::

:::

---

class: question middle

There are many more .yellow[chunk options].

Can you name 5 other ones?

Hint: https://yihui.name/knitr/options/

(We'll explore some later)


---

class: info

# Valid chunk options

* Chunk options must be written in **one line**, i.e. no line break. 


* All option values must be **valid R expressions**. Exception is the chunk name. E.g.
   * `fig.path = figures/` is not valid but <br>`fig.path = "figures/"` is valid
   * `eval = true` is not valid but<br> `eval = runif(1) > 0.5` is valid

---

class: info

# Chunk names (or labels)

The chunk below is called `plot1`.
````markdown
`r ''````{r plot1}
ggplot(cars, aes(dist, speed)) + geom_point()
```
````

All chunks have a label regardless of whether it is explicitly supplied or not.

All chunks without explicit name has labels with prefix `unnamed-chunk-`.

---

class: challenge middle

# Try your best going through 

`challenge-02.Rmd`

`r countdown::countdown(20, font_size = "1.5em", color_background="white", color_text = "black", color_border="black")`

---

# R Markdown is not just for R

::: grid 

::: item 

````markdown
`r ''````{python, echo = FALSE}
a = [1, 2, 3]
a[0]
```
````

<center>
<i class="fas fa-arrow-down"></i>
</center>

```{python, echo = FALSE}
a = [1, 2, 3]
a[0]
```
<p></p>

:::

::: item 

````markdown
`r ''````{bash, echo = FALSE}
date +%B
```
````
<center>
<i class="fas fa-arrow-down"></i>
</center>

```{bash, echo = FALSE}
date +%B
```
<p></p>
::::

::::

---

class: question middle

Can you name some other engines?

Hint: https://yihui.name/knitr/demo/engines/


---

::: pad10

# Inline R Commands


```markdown
Today's date is ``r "r Sys.Date()"``.
```

Today's date is `r Sys.Date()`.

```markdown
The value of $\pi$ is ``r "r pi"``.
```

The value of $\pi$ is `r pi`.

* Note: the inline command do not work with other engines.


* Inline command does *not* `echo` and always `eval`uates.

<p></p>

:::


---



# YAML - YAML Ain't Markup Language

:::: grid

::: item 

Basic format
```markdown
---
key: value
---
```
:::

::: item 

Example

```
---
title: "Communicating with Data via R Markdown"
subtitle: "Reproducible Reports"
author: "Emi Tanaka"
date: "``r "r Sys.Date()"``"
output: html_document
---
```

There must be a space after "`:`"!
<p></p>
:::

:::

---

# Metadata

All YAML data are stored in `rmarkdown::metadata` as list.

```{r}
rmarkdown::metadata$title
rmarkdown::metadata$author
```

---

class: font_small

# Default (minimal) html output

```
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta name="author" content="Emi Tanaka" />
<meta name="date" content="2019-10-04" />
<title>Communicating with Data via R Markdown</title>
</head>

<body>
<h1 class="title toc-ignore">Communicating with Data via R Markdown</h1>
<h3 class="subtitle">Reproducible Reports</h3>
<h4 class="author">Emi Tanaka</h4>
<h4 class="date">2019-10-04</h4>
</body>
</html>
```
<p></p>

::: { .bubble1 .pos width:300px;left:70%;top:48%;}

html meta data

:::

::: { .bubble1 .pos width:650px;left:43%;top:75%;}

Default html template add special YAML key values to file automatically

:::

::: {.pos top:10px; right:200px;}
output<br>
<img src = "images/minimal-html-output.png" width = "250px" style="border: solid 3px black;"/>

:::

---

::: pad10

# YAML structure

* White spaces indicate structure in YAML - don't use tabs though!
* Same as R, you can comment lines by starting with `#`.
* YAML is case sensitive.
* A `key` can hold multiple values. 

```markdown
key: 
  - value 1
  - value 2
```

```markdown
key: [value 1, value 2]
```

:::

---

class: font_small

# YAML with multiple key values

```
---
title: "Communicating with Data via R Markdown"
author: 
 - "Emi Tanaka"
 - "Accomplice"
output: html_document
---
```

```
<body>
<h1 class="title toc-ignore">Communicating with Data via R Markdown</h1>
<h4 class="author">Emi Tanaka</h4>
*<h4 class="author">Accomplice</h4> 
</body>
```

<p></p>

::: {.pos top:10px; right:200px;}
output<br>
<img src = "images/minimal-html-output2.png" width = "250px" style="border: solid 3px black;"/>

:::


---

class: question


::: {text-align: left;}

# `key` can contain `key`s


```
---
output: 
  html_document:
    toc: true
    toc_float: true
---
```
<p></p>
What does this do?

:::

(Note: white space is important)

---

class: font_small

# Values spanning multiple lines

```markdown
---
title: >
  this is a\ 
  single line\
  
abstract: |
  this value spans\
  many lines and\
  appears as it is\
  
output: pdf_document
---

``r "r rmarkdown::metadata$title"``
``r "r rmarkdown::metadata$abstract"``
```

::: {.pos top:100px; right:50px;}
output<br>
<img src = "images/minimal-pdf-output.png" width = "800px" style="border: solid 3px black;"/>

:::

---

class: font_small

# Parametrized Report

````markdown
---
title: "Parameterized Report"
params:
  species: setosa
---

`r ''````{r, message = FALSE, fig.dim = c(3,2)}
library(tidyverse)
iris %>% 
*  filter(Species==params$species) %>% 
   ggplot(aes(Sepal.Length, Sepal.Width)) +
   geom_point(aes(color=Species))
```
````

::: {.pos top:10px; right:10px;}
output<br>
<img src = "images/parameterised-report-eg1.png" width = "550px" style="border: solid 3px black;"/>

:::

---

class: font_smaller

::: grid
::: item 
# Knit with Parameters
```markdown
---
title: "Parameterized Report"
params:
  species: 
    label: "Species"
    value: setosa
    input: select
    choices: [setosa, versicolor, virginica]
  color: red
  max:
    label: "Maximum Sepal Width"
    value: 4
    input: slider
    min: 4
    max: 5
    step: 0.1
---
```

:::

::: item 

<img src = "images/knit-with-params.png" width = "300px" style="border: solid 3px black;"/>

````markdown
`r ''````{r, message = params$printmsg, fig.dim = c(3,2)}
library(tidyverse)
iris %>% 
  filter(Species==params$species) %>% 
  filter(Sepal.Width < params$max) %>% 
  ggplot(aes(Sepal.Length, Sepal.Width)) +
  geom_point(aes(color=Species), 
             color = params$color)
```
````



:::

:::

---

class: font_smaller

::: grid
::: item 
# Shiny Report Generator
```markdown
---
title: "Parameterized Report"
params:
  species: 
    label: "Species"
    value: setosa
    input: select
    choices: [setosa, versicolor, virginica]
  color: red
  max:
    label: "Maximum Sepal Width"
    value: 4
    input: slider
    min: 4
    max: 5
    step: 0.1
---
```

:::

::: item 

# &nbsp;

<img src = "images/shiny-params.png" width = "100%" style="border: solid 3px black;"/>


:::

:::




---

class: challenge middle

Go through

`challenge-03.Rmd`

`r countdown::countdown(20, font_size = "1.5em", color_background="white", color_text = "black", color_border="black")`

---

# Themes: `html_document`  

<!-- The Modal -->
<div id="myModal" class="modal">
  <div id="caption"></div>
  <span class="close" onclick="document.getElementById('myModal').style.display='none'">&times;</span>
  <iframe class="modal-content" id="img01"></iframe><br>
</div>

You can change the look of the html document by specifying themes:
::: grid 

::: item 

* `default` <img class="modalImg" alt="default"/> 
* `cerulean` <img class="modalImg" alt="cerulean"/> 
* `journal`  <img class="modalImg" alt="journal"/> 
* `flatly` <img class="modalImg" alt="flatly"/> 
* `darkly` <img class="modalImg" alt="darkly"/> 
* `readable` <img class="modalImg" alt="readable"/> 
* `spacelab` <img class="modalImg" alt="spacelab"/> 
* `united` <img class="modalImg" alt="united"/> 

:::

::: item 


* `cosmo` <img class="modalImg" alt="cosmo"/> 
* `lumen` <img class="modalImg" alt="lumen"/> 
* `paper` <img class="modalImg" alt="paper"/> 
* `sandstone` <img class="modalImg" alt="sandstone"/> 
* `simplex` <img class="modalImg" alt="simplex"/> 
* `yeti` <img class="modalImg" alt="yeti"/> 
* `NULL`  <img class="modalImg" alt="null"/> 

:::

::: item 


```markdown
output: 
  html_document:
    theme: cerulean
```

These [bootswatch](https://bootswatch.com/) themes attach the whole bootstrap library which makes your html file size larger.

:::

:::

---

# `prettydoc` 

<!-- The Modal -->
<div id="myModal2" class="modal">
  <div id="caption2"></div>
  <span class="close" onclick="document.getElementById('myModal2').style.display='none'">&times;</span>
  <iframe class="modal-content" id="img02"></iframe><br>
</div>

::: grid 

::: item 

`prettydoc` `r emo::ji('package')` is another community driven template but specification is determined by `theme`:

* `cayman` <img class="modalImg2" alt="cayman"/> 
* `tactile` <img class="modalImg2" alt="tactile"/> 
* `architect` <img class="modalImg2" alt="architect"/> 
* `leonids` <img class="modalImg2" alt="leonids"/> 
* `hpstr` <img class="modalImg2" alt="hpstr"/> 



:::

::: item 



```markdown
output: 
  prettydoc::html_pretty:
    theme: cayman
```

See more about it below:

https://prettydoc.statr.me/

:::

:::





---

# `rmdformats`

<!-- The Modal -->
<div id="myModal3" class="modal">
  <div id="caption3"></div>
  <span class="close" onclick="document.getElementById('myModal3').style.display='none'">&times;</span>
  <iframe class="modal-content" id="img03"></iframe><br>
</div>


::: grid 

::: item 

`rmdformats` `r emo::ji('package')` contains four built-in `html` formats: 


* `readthedown` <img class="modalImg3" alt="readthedown"/> 
* `html_clean` <img class="modalImg3" alt="html_clean"/> 
* `html_docco` <img class="modalImg3" alt="html_docco"/> 
* `material` <img class="modalImg3" alt="material"/> 

:::

::: item 

You can use these formats by simply specifying the output in YAML as below:


```markdown
output: rmdformats::readthedown
```

See more about it below:

https://github.com/juba/rmdformats

:::

:::



---

# Templates: `rticles`

---

# Templates: your own?



---


# Citations

---

# Cross Reference

---


```{r checklist, echo = FALSE}
checklist <- c("Understand how YAML changes .Rmd",
               "Understand how to manipulate chunks in .Rmd",
               "Change figure sizes in .Rmd")
```
```{r endslide, child="endslide.Rmd"}
```


